buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.9.+'
    }
}
apply plugin: 'android'

repositories {
    mavenCentral()
    maven { url 'http://jzaccone.github.io/SlidingMenu-aar' }
}

android {
    compileSdkVersion 19
    buildToolsVersion '19.0.3'

    packagingOptions {
        pickFirst 'META-INF/ASL2.0'
        pickFirst 'META-INF/LICENSE'
        pickFirst 'META-INF/NOTICE'
    }

    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            runProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

libraries = [
    ArcMenu: [
        "$projectDir/libs/ArcMenu/library"
    ]
]

dependencies {
    compile 'com.actionbarsherlock:actionbarsherlock:4.4.0@aar'
    compile 'com.jeremyfeinstein.slidingmenu:library:1.3@aar'
    compile 'com.fasterxml.jackson.core:jackson-core:2.3.3'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.3.3'
    compile 'com.android.support:support-v4:19.1.+'
    compile 'com.google.maps.android:android-maps-utils:0.3+'
    compile 'com.google.android.gms:play-services:4.3.+'
    compile files(libraries.ArcMenu)
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

android.applicationVariants.all { variant ->
    aptOutput = file("${project.buildDir}/source/apt_generated/${variant.dirName}")
    println "****************************"
    println "variant: ${variant.name}"
    println "manifest:  ${variant.processResources.manifestFile}"
    println "aptOutput:  ${aptOutput}"
    println "****************************"

    variant.javaCompile.doFirst {
        println "*** compile doFirst ${variant.name}"
        aptOutput.mkdirs()
        variant.javaCompile.options.compilerArgs += [
                '-processorpath', configurations.apt.getAsPath(),
                '-AandroidManifestFile=' + variant.processResources.manifestFile,
                '-s', aptOutput
        ]
    }

    variant.addJavaSourceFoldersToModel(aptOutput)
}